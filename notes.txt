#Cell bot operations
#
#Bot limitations
#   some # of R/W registers that hold numbers
#   conditional flag
#   a TTL register that is only writable (default/max 255)
#   a FIFO QUEUE_MAX (default/max 255)
#
#INSTRUCTION LISTING
#   put src:R/I/Q dst:R/DIR
#   add src:R/I/Q dst:R/DIR
#   sub src:R/I/Q dst:R/DIR
#   mul src:R/I/Q dst:R/DIR
#   div src:R/I/Q result_dst:R/DIR mod_dst:R/DIR
#
#   tgt R/I/Q R/I/Q     test greater than
#   tlt R/I/Q R/I/Q     test less than
#   teq R/I/Q R/I/Q     test equal to
#
#   qmax R/I/DIR        set max queue size [0-255]
#   ttl R/I/DIR         set message ttl [0-255] where 0 means infinite TTL
#
#   jmp LABEL
#   jmpr R/I/Q
#   not R
#   id R
#   count BOT_NAME dst:R/DIR
#
#   spawn BOT_NAME DIR
#   fork DIR
#   kill DIR
#   move DIR
#   look DIR
#
#   die
#
#null is a valid register
#
#DIR should be of form AXIS(+/-)
#   ie X+ X- Y+ Y- Z+ Z-
#   allow for arbitrary number of dimensions
#   D0+ is the same as X+
#
#   
#   ?messages can move in multiple directions at once?
#
#spawning or forking another bot into an occupied space
#   will overwrite the previous bot 
#
#moving into an already occupied space will cause the move to fail
#moving sets the conditional register based on success
#
#writing to DIR will spawn a message moving in space
#messages move 1 space per tick in the direction they are fired
#when a message overlaps a bot, it is added to their message queue, the message is destroyed
#reading from an empty queue will cause the bot to hang until a message is recieved
#
#
#messages can pass through each other
#messages die when their TTL expires (or never do if TTL was set to 0)
#
#invalid instructions cause bot death (div 0,
#
#TURN PRIORITY
#messages are moved based on age (older = firster)
#bots code is ticked forward executed based on age (older = firster)
#bots killed before their turn don't execute anything


